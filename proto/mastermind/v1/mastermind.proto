syntax = "proto3";

package mastermind.v1;

// A MissionState is a state the mission can be in at any point in time
enum MissionState {
  MISSION_STATE_UNSPECIFIED = 0;
  MISSION_STATE_APPROACH = 1;
  MISSION_STATE_FOLLOWING = 2;
  MISSION_STATE_KAMIKAZE = 3;
}

// A StateTransition is an action that causes the current MissonState to change
//
// e.g. STATE_TRANSITION_TARGET_APPROACHED changes mission state
// from MISSION_STATE_APPROACH to MISSION_STATE_FOLLOWING
enum StateTransition {
  STATE_TRANSITION_UNSPECIFIED = 0;
  STATE_TRANSITION_TARGET_APPROACHED = 1;
  STATE_TRANSITION_LOCK_FAILED = 2;
  STATE_TRANSITION_LOCK_SUCCESS = 3;
  STATE_TRANSITION_QR_SUCCESS = 4;
  STATE_TRANSITION_QR_FAILED = 5;
  STATE_TRANSITION_MODE_KAMIKAZE_SELECTED = 6;
  STATE_TRANSITION_MODE_APPROACH_SELECTED = 7;
}

message UpdateStateRequest { StateTransition state_transition = 1; }

message UpdateStateResponse {
  MissionState old_state = 1;
  StateTransition state_transition = 2;
  MissionState current_state = 3;
}

message GetTelemetryRequest {}
message GetTelemetryResponse {
  uint32 time_boot_ms = 1; // Timestamp of last message in milliseconds
  int32 lat = 2;           // Latitude in degrees * 10^7
  int32 lon = 3;           // Longitude in degrees * 10^7
  int32 relative_alt = 4;  // Altitude above ground in millimeters
  float roll = 5;          // Roll angle (-pi..+pi)
  float pitch = 6;         // Pitch angle (-pi..+pi)
  float yaw = 7;           // Yaw / heading angle from north (-pi..+pi)
  float airspeed = 8;      // Airspeed in m/s
  float groundspeed = 9;   // Groundspeed in m/s
}

// Target is a target being locked onto by the UAV
message Target {
  uint32 x = 1;      // x coordinate of center of bounding box in pixels
  uint32 y = 2;      // y coordinate of center of bounding box in pixels
  uint32 width = 3;  // width of target bounding box in pixels
  uint32 height = 4; // height of target bounding box in pixels
}

message GetDetailedTelemetryRequest {}
message GetDetailedTelemetryResponse {
  uint32 time_boot_ms = 1; // Timestamp of last message in milliseconds
  int32 lat = 2;           // Latitude in degrees * 10^7
  int32 lon = 3;           // Longitude in degrees * 10^7
  int32 relative_alt = 4;  // Altitude above ground in millimeters
  float roll = 5;          // Roll angle (-pi..+pi)
  float pitch = 6;         // Pitch angle (-pi..+pi)
  float yaw = 7;           // Yaw / heading angle from north (-pi..+pi)
  float airspeed = 8;      // Airspeed in m/s
  float groundspeed = 9;   // Groundspeed in m/s
  int32 battery = 10;      // Remaining battery energy. Values: [0-100], -1:
                           // autopilot does not estimate the remaining battery.
  bool autonomous = 11;    // True if the UAV is in a mode being controlled
                           // autonomously, False otherwise
  optional Target target = 12; // Target being locked on by the UAV
}

service MastermindService {
  // A bidirectional stream
  // Accepts a stream of UpdateStateRequests during the competition, while
  // sending UpdateStateResponses whenever a valid StateTransition is submitted
  // by any client
  rpc UpdateState(stream UpdateStateRequest)
      returns (stream UpdateStateResponse);

  // Returns a normal telemetry stream when activated. Should be used by
  // services that don't interact with the competition server

  rpc GetTelemetry(GetTelemetryRequest) returns (stream GetTelemetryResponse);

  // Returns a detailed telemetry response. SHOULD be used by services that
  // interact with the competiiton server
  rpc GetDetailedTelemetry(GetDetailedTelemetryRequest)
      returns (stream GetDetailedTelemetryResponse);
}
