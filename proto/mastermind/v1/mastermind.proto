syntax = "proto3";

package mastermind.v1;

// A MissionState is a state the mission can be in at any point in time
enum MissionState {
  MISSION_STATE_UNSPECIFIED = 0;
  MISSION_STATE_APPROACH = 1;
  MISSION_STATE_FOLLOWING = 2;
  MISSION_STATE_KAMIKAZE = 3;
}

// A StateTransition is an action that causes the current MissonState to change
//
// e.g. STATE_TRANSITION_TARGET_APPROACHED changes mission state
// from MISSION_STATE_APPROACH to MISSION_STATE_FOLLOWING
enum StateTransition {
  STATE_TRANSITION_UNSPECIFIED = 0;
  STATE_TRANSITION_TARGET_APPROACHED = 1;
  STATE_TRANSITION_LOCK_FAILED = 2;
  STATE_TRANSITION_LOCK_SUCCESS = 3;
  STATE_TRANSITION_QR_SUCCESS = 4;
  STATE_TRANSITION_QR_FAILED = 5;
  STATE_TRANSITION_MODE_KAMIKAZE_SELECTED = 6;
  STATE_TRANSITION_MODE_APPROACH_SELECTED = 7;
}

message UpdateStateRequest { StateTransition state_transition = 1; }

message UpdateStateResponse {
  MissionState old_state = 1;
  StateTransition state_transition = 2;
  MissionState current_state = 3;
}

message GetTelemetryRequest {}
message GetTelemetryResponse {
  uint64 time_boot_ms = 1; // Timestamp of last message in milliseconds
  int32 lat = 2;           // Latitude in degrees * 10^7
  int32 lon = 3;           // Longitude in degrees * 10^7
  int32 relative_alt = 4;  // Altitude above ground in millimeters
  float roll = 5;          // Roll angle (-pi..+pi)
  float pitch = 6;         // Pitch angle (-pi..+pi)
  float yaw = 7;           // Yaw / heading angle from north (-pi..+pi)
  float airspeed = 8;      // Airspeed in m/s
  float groundspeed = 9;   // Groundspeed in m/s
  uint32 wp_dist =
      10; // Distance to active waypoint in meters. 0 if no waypoint
}

// Target is a target being locked onto by the UAV
message Target {
  uint32 x = 1;      // x coordinate of center of bounding box in pixels
  uint32 y = 2;      // y coordinate of center of bounding box in pixels
  uint32 width = 3;  // width of target bounding box in pixels
  uint32 height = 4; // height of target bounding box in pixels
}

message GetDetailedTelemetryRequest {}
message GetDetailedTelemetryResponse {
  uint64 time_boot_ms = 1; // Timestamp of last message in milliseconds
  int32 lat = 2;           // Latitude in degrees * 10^7
  int32 lon = 3;           // Longitude in degrees * 10^7
  int32 relative_alt = 4;  // Altitude above ground in millimeters
  float roll = 5;          // Roll angle (-pi..+pi)
  float pitch = 6;         // Pitch angle (-pi..+pi)
  float yaw = 7;           // Yaw / heading angle from north (-pi..+pi)
  float airspeed = 8;      // Airspeed in m/s
  float groundspeed = 9;   // Groundspeed in m/s
  uint32 wp_dist =
      10;             // Distance to active waypoint in meters. 0 if no waypoint
  int32 battery = 11; // Remaining battery energy. Values: [0-100], -1:
                      // autopilot does not estimate the remaining battery.
  bool autonomous = 12;        // True if the UAV is in a mode being controlled
                               // autonomously, False otherwise
  optional Target target = 13; // Target being locked on by the UAV
}

// PIDLevel represents the plane's agility. PID's corresponding to each level
// are stored onboard in the mastermind config.
enum PIDLevel {
  PID_LEVEL_UNSPECIFIED = 0;
  PID_LEVEL_1 = 1;
  PID_LEVEL_2 = 2;
  PID_LEVEL_3 = 3;
  PID_LEVEL_4 = 4;
  PID_LEVEL_5 = 5;
  PID_LEVEL_6 = 6;
  PID_LEVEL_7 = 7;
  PID_LEVEL_8 = 8;
}

message SetPIDLevelRequest { PIDLevel level = 1; }
message SetPIDLevelResponse { bool command_succeeded = 1; }

message SetSpeedRequest { float new_speed = 1; }
message SetSpeedResponse { bool command_succeeded = 1; }

// GotoWaypoint sends a waypoint in the MAV_FRAME_GLOBAL_RELATIVE_ALT frame to
// go to
message GotoWaypointRequest {
  float lat = 1;
  float lon = 2;
  float alt = 3;
}
// SetAttitude sends the desired attitude of the plane in degrees. Mastermind changes mode to FBWB before giving commands
message SetAttitudeRequest {
  float pitch = 1; // degree
  float roll = 2;  // degree
  Target target = 3; // positions of the target plane on the live stream
}
message SetAttitudeResponse {}
message GotoWaypointResponse { bool command_succeeded = 1; }

message Time {
  uint32 hours = 1;
  uint32 minutes = 2;
  uint32 seconds = 3;
  uint32 milliseconds = 4;
}

service MastermindService {
  // A bidirectional stream
  // Accepts a stream of UpdateStateRequests during the competition, while
  // sending UpdateStateResponses whenever a valid StateTransition is submitted
  // by any client
  rpc UpdateState(stream UpdateStateRequest)
      returns (stream UpdateStateResponse);

  // Returns a normal telemetry stream when activated. Should be used by
  // services that don't interact with the competition server

  rpc GetTelemetry(GetTelemetryRequest) returns (stream GetTelemetryResponse);

  // Returns a detailed telemetry response. SHOULD be used by services that
  // interact with the competiiton server
  rpc GetDetailedTelemetry(GetDetailedTelemetryRequest)
      returns (stream GetDetailedTelemetryResponse);

  // SetPIDLevel sets the PID level for the plane
  rpc SetPIDLevel(SetPIDLevelRequest) returns (SetPIDLevelResponse);

  // SetSpeed sets the plane's airspeed in m/s
  rpc SetSpeed(SetSpeedRequest) returns (SetSpeedResponse);

  // GotoWaypoint commands the plane to go to specified waypoint
  rpc GotoWaypoint(GotoWaypointRequest) returns (GotoWaypointResponse);

  // SetAttitude comannds the plane to change its attitude
  rpc SetAttitude(stream SetAttitudeRequest) returns (SetAttitudeResponse);
}
