
syntax = "proto3";

package approach.v1;

enum AgilityLevel {
  AGILITY_LEVEL_UNSPECIFIED = 0;
  AGILITY_LEVEL_HIGH = 1;
  AGILITY_LEVEL_MEDIUM = 2;
  AGILITY_LEVEL_LOW = 3;
}

// Plane is a UAV participating in the round. Can be the sender's own UAV
message Plane {
  int32 plane_id = 1; // Plane's ID in competition server. Exception is sender's
                      // UAV, which is changed to a negative int
  double lat = 2;     // Plane's latitude in degrees
  double lon = 3;     // Plane's longitude in degrees
  double alt = 4;     // Plane's altitude in metres
  double heading = 5; // Plane's heading in degrees from North
  double speed = 6;   // Plane's groundspeend in m/s
  AgilityLevel agility_level = 7; // Plane's agility level. High or 1 is most
  // agile, low or 3 is least agile
  double score = 8; // Probability of locking on plane, between 0 and 100. 100
                    // is easiest to lock on
}

// GetPlanesRequest is the request that initializes a stream of
// GetPlanesResponses
message GetPlanesRequest {}

// GetPlanesResponse has a list of planes and the selected plane id for any
// point in time
message GetPlanesResponse {
  int32 selected_plane_id = 1;
  repeated Plane planes = 2;
}

// ApproachService is responsible for calculating and giving commands to
// KOUSTECH's UAV to approach a target enemy UAV
service ApproachService {

  // A server-streaming endpoint
  // Accepts a GetPlanesRequest and returns a stream of airplanes and their
  // properties, and the selected plane id if it exists
  
  // rpc GetPlanes(GetPlanesRequest) returns (stream GetPlanesResponse); // TODO: fake data için yorum satırına alındı.
  rpc GetPlanes(GetPlanesRequest) returns (stream GetPlanesResponse);
}