// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/mastermind/v1/mastermind.proto

package mastermindv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MastermindService_UpdateState_FullMethodName          = "/mastermind.v1.MastermindService/UpdateState"
	MastermindService_GetTelemetry_FullMethodName         = "/mastermind.v1.MastermindService/GetTelemetry"
	MastermindService_GetDetailedTelemetry_FullMethodName = "/mastermind.v1.MastermindService/GetDetailedTelemetry"
	MastermindService_SetPIDLevel_FullMethodName          = "/mastermind.v1.MastermindService/SetPIDLevel"
	MastermindService_SetSpeed_FullMethodName             = "/mastermind.v1.MastermindService/SetSpeed"
	MastermindService_GotoWaypoint_FullMethodName         = "/mastermind.v1.MastermindService/GotoWaypoint"
	MastermindService_SetAttitude_FullMethodName          = "/mastermind.v1.MastermindService/SetAttitude"
)

// MastermindServiceClient is the client API for MastermindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MastermindServiceClient interface {
	// A bidirectional stream
	// Accepts a stream of UpdateStateRequests during the competition, while
	// sending UpdateStateResponses whenever a valid StateTransition is submitted
	// by any client
	UpdateState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateStateRequest, UpdateStateResponse], error)
	GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTelemetryResponse], error)
	// Returns a detailed telemetry response. SHOULD be used by services that
	// interact with the competiiton server
	GetDetailedTelemetry(ctx context.Context, in *GetDetailedTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDetailedTelemetryResponse], error)
	// SetPIDLevel sets the PID level for the plane
	SetPIDLevel(ctx context.Context, in *SetPIDLevelRequest, opts ...grpc.CallOption) (*SetPIDLevelResponse, error)
	// SetSpeed sets the plane's airspeed in m/s
	SetSpeed(ctx context.Context, in *SetSpeedRequest, opts ...grpc.CallOption) (*SetSpeedResponse, error)
	// GotoWaypoint commands the plane to go to specified waypoint
	GotoWaypoint(ctx context.Context, in *GotoWaypointRequest, opts ...grpc.CallOption) (*GotoWaypointResponse, error)
	// SetAttitude comannds the plane to change its attitude
	SetAttitude(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetAttitudeRequest, SetAttitudeResponse], error)
}

type mastermindServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMastermindServiceClient(cc grpc.ClientConnInterface) MastermindServiceClient {
	return &mastermindServiceClient{cc}
}

func (c *mastermindServiceClient) UpdateState(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateStateRequest, UpdateStateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[0], MastermindService_UpdateState_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateStateRequest, UpdateStateResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_UpdateStateClient = grpc.BidiStreamingClient[UpdateStateRequest, UpdateStateResponse]

func (c *mastermindServiceClient) GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetTelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[1], MastermindService_GetTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetTelemetryRequest, GetTelemetryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_GetTelemetryClient = grpc.ServerStreamingClient[GetTelemetryResponse]

func (c *mastermindServiceClient) GetDetailedTelemetry(ctx context.Context, in *GetDetailedTelemetryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDetailedTelemetryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[2], MastermindService_GetDetailedTelemetry_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDetailedTelemetryRequest, GetDetailedTelemetryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_GetDetailedTelemetryClient = grpc.ServerStreamingClient[GetDetailedTelemetryResponse]

func (c *mastermindServiceClient) SetPIDLevel(ctx context.Context, in *SetPIDLevelRequest, opts ...grpc.CallOption) (*SetPIDLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetPIDLevelResponse)
	err := c.cc.Invoke(ctx, MastermindService_SetPIDLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastermindServiceClient) SetSpeed(ctx context.Context, in *SetSpeedRequest, opts ...grpc.CallOption) (*SetSpeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSpeedResponse)
	err := c.cc.Invoke(ctx, MastermindService_SetSpeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastermindServiceClient) GotoWaypoint(ctx context.Context, in *GotoWaypointRequest, opts ...grpc.CallOption) (*GotoWaypointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GotoWaypointResponse)
	err := c.cc.Invoke(ctx, MastermindService_GotoWaypoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastermindServiceClient) SetAttitude(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SetAttitudeRequest, SetAttitudeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[3], MastermindService_SetAttitude_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetAttitudeRequest, SetAttitudeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_SetAttitudeClient = grpc.ClientStreamingClient[SetAttitudeRequest, SetAttitudeResponse]

// MastermindServiceServer is the server API for MastermindService service.
// All implementations should embed UnimplementedMastermindServiceServer
// for forward compatibility.
type MastermindServiceServer interface {
	// A bidirectional stream
	// Accepts a stream of UpdateStateRequests during the competition, while
	// sending UpdateStateResponses whenever a valid StateTransition is submitted
	// by any client
	UpdateState(grpc.BidiStreamingServer[UpdateStateRequest, UpdateStateResponse]) error
	GetTelemetry(*GetTelemetryRequest, grpc.ServerStreamingServer[GetTelemetryResponse]) error
	// Returns a detailed telemetry response. SHOULD be used by services that
	// interact with the competiiton server
	GetDetailedTelemetry(*GetDetailedTelemetryRequest, grpc.ServerStreamingServer[GetDetailedTelemetryResponse]) error
	// SetPIDLevel sets the PID level for the plane
	SetPIDLevel(context.Context, *SetPIDLevelRequest) (*SetPIDLevelResponse, error)
	// SetSpeed sets the plane's airspeed in m/s
	SetSpeed(context.Context, *SetSpeedRequest) (*SetSpeedResponse, error)
	// GotoWaypoint commands the plane to go to specified waypoint
	GotoWaypoint(context.Context, *GotoWaypointRequest) (*GotoWaypointResponse, error)
	// SetAttitude comannds the plane to change its attitude
	SetAttitude(grpc.ClientStreamingServer[SetAttitudeRequest, SetAttitudeResponse]) error
}

// UnimplementedMastermindServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMastermindServiceServer struct{}

func (UnimplementedMastermindServiceServer) UpdateState(grpc.BidiStreamingServer[UpdateStateRequest, UpdateStateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedMastermindServiceServer) GetTelemetry(*GetTelemetryRequest, grpc.ServerStreamingServer[GetTelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetTelemetry not implemented")
}
func (UnimplementedMastermindServiceServer) GetDetailedTelemetry(*GetDetailedTelemetryRequest, grpc.ServerStreamingServer[GetDetailedTelemetryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDetailedTelemetry not implemented")
}
func (UnimplementedMastermindServiceServer) SetPIDLevel(context.Context, *SetPIDLevelRequest) (*SetPIDLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIDLevel not implemented")
}
func (UnimplementedMastermindServiceServer) SetSpeed(context.Context, *SetSpeedRequest) (*SetSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpeed not implemented")
}
func (UnimplementedMastermindServiceServer) GotoWaypoint(context.Context, *GotoWaypointRequest) (*GotoWaypointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GotoWaypoint not implemented")
}
func (UnimplementedMastermindServiceServer) SetAttitude(grpc.ClientStreamingServer[SetAttitudeRequest, SetAttitudeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SetAttitude not implemented")
}
func (UnimplementedMastermindServiceServer) testEmbeddedByValue() {}

// UnsafeMastermindServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MastermindServiceServer will
// result in compilation errors.
type UnsafeMastermindServiceServer interface {
	mustEmbedUnimplementedMastermindServiceServer()
}

func RegisterMastermindServiceServer(s grpc.ServiceRegistrar, srv MastermindServiceServer) {
	// If the following call pancis, it indicates UnimplementedMastermindServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MastermindService_ServiceDesc, srv)
}

func _MastermindService_UpdateState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MastermindServiceServer).UpdateState(&grpc.GenericServerStream[UpdateStateRequest, UpdateStateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_UpdateStateServer = grpc.BidiStreamingServer[UpdateStateRequest, UpdateStateResponse]

func _MastermindService_GetTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MastermindServiceServer).GetTelemetry(m, &grpc.GenericServerStream[GetTelemetryRequest, GetTelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_GetTelemetryServer = grpc.ServerStreamingServer[GetTelemetryResponse]

func _MastermindService_GetDetailedTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDetailedTelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MastermindServiceServer).GetDetailedTelemetry(m, &grpc.GenericServerStream[GetDetailedTelemetryRequest, GetDetailedTelemetryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_GetDetailedTelemetryServer = grpc.ServerStreamingServer[GetDetailedTelemetryResponse]

func _MastermindService_SetPIDLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPIDLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).SetPIDLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MastermindService_SetPIDLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).SetPIDLevel(ctx, req.(*SetPIDLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastermindService_SetSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).SetSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MastermindService_SetSpeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).SetSpeed(ctx, req.(*SetSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastermindService_GotoWaypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GotoWaypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).GotoWaypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MastermindService_GotoWaypoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).GotoWaypoint(ctx, req.(*GotoWaypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastermindService_SetAttitude_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MastermindServiceServer).SetAttitude(&grpc.GenericServerStream[SetAttitudeRequest, SetAttitudeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MastermindService_SetAttitudeServer = grpc.ClientStreamingServer[SetAttitudeRequest, SetAttitudeResponse]

// MastermindService_ServiceDesc is the grpc.ServiceDesc for MastermindService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MastermindService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mastermind.v1.MastermindService",
	HandlerType: (*MastermindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPIDLevel",
			Handler:    _MastermindService_SetPIDLevel_Handler,
		},
		{
			MethodName: "SetSpeed",
			Handler:    _MastermindService_SetSpeed_Handler,
		},
		{
			MethodName: "GotoWaypoint",
			Handler:    _MastermindService_GotoWaypoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateState",
			Handler:       _MastermindService_UpdateState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTelemetry",
			Handler:       _MastermindService_GetTelemetry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDetailedTelemetry",
			Handler:       _MastermindService_GetDetailedTelemetry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetAttitude",
			Handler:       _MastermindService_SetAttitude_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mastermind/v1/mastermind.proto",
}
