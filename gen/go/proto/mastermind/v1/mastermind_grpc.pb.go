// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/mastermind/v1/mastermind.proto

package mastermindv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MastermindServiceClient is the client API for MastermindService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MastermindServiceClient interface {
	// A bidirectional stream
	// Accepts a stream of UpdateStateRequests during the competition, while
	// sending UpdateStateResponses whenever a valid StateTransition is submitted
	// by any client
	UpdateState(ctx context.Context, opts ...grpc.CallOption) (MastermindService_UpdateStateClient, error)
	GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (MastermindService_GetTelemetryClient, error)
	// Returns a detailed telemetry response. SHOULD be used by services that
	// interact with the competiiton server
	GetDetailedTelemetry(ctx context.Context, in *GetDetailedTelemetryRequest, opts ...grpc.CallOption) (MastermindService_GetDetailedTelemetryClient, error)
	// SetPIDLevel sets the PID level for the plane
	SetPIDLevel(ctx context.Context, in *SetPIDLevelRequest, opts ...grpc.CallOption) (*SetPIDLevelResponse, error)
	// SetSpeed sets the plane's airspeed in m/s
	SetSpeed(ctx context.Context, in *SetSpeedRequest, opts ...grpc.CallOption) (*SetSpeedResponse, error)
	// GotoWaypoint commands the plane to go to specified waypoint
	GotoWaypoint(ctx context.Context, in *GotoWaypointRequest, opts ...grpc.CallOption) (*GotoWaypointResponse, error)
	// SetAttitude comannds the plane to change its attitude
	SetAttitude(ctx context.Context, opts ...grpc.CallOption) (MastermindService_SetAttitudeClient, error)
	// LockSuccess indicates a successful lock on target for more than 4 seconds
	LockSuccess(ctx context.Context, in *LockSuccessRequest, opts ...grpc.CallOption) (*LockSuccessResponse, error)
}

type mastermindServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMastermindServiceClient(cc grpc.ClientConnInterface) MastermindServiceClient {
	return &mastermindServiceClient{cc}
}

func (c *mastermindServiceClient) UpdateState(ctx context.Context, opts ...grpc.CallOption) (MastermindService_UpdateStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[0], "/mastermind.v1.MastermindService/UpdateState", opts...)
	if err != nil {
		return nil, err
	}
	x := &mastermindServiceUpdateStateClient{stream}
	return x, nil
}

type MastermindService_UpdateStateClient interface {
	Send(*UpdateStateRequest) error
	Recv() (*UpdateStateResponse, error)
	grpc.ClientStream
}

type mastermindServiceUpdateStateClient struct {
	grpc.ClientStream
}

func (x *mastermindServiceUpdateStateClient) Send(m *UpdateStateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mastermindServiceUpdateStateClient) Recv() (*UpdateStateResponse, error) {
	m := new(UpdateStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mastermindServiceClient) GetTelemetry(ctx context.Context, in *GetTelemetryRequest, opts ...grpc.CallOption) (MastermindService_GetTelemetryClient, error) {
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[1], "/mastermind.v1.MastermindService/GetTelemetry", opts...)
	if err != nil {
		return nil, err
	}
	x := &mastermindServiceGetTelemetryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MastermindService_GetTelemetryClient interface {
	Recv() (*GetTelemetryResponse, error)
	grpc.ClientStream
}

type mastermindServiceGetTelemetryClient struct {
	grpc.ClientStream
}

func (x *mastermindServiceGetTelemetryClient) Recv() (*GetTelemetryResponse, error) {
	m := new(GetTelemetryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mastermindServiceClient) GetDetailedTelemetry(ctx context.Context, in *GetDetailedTelemetryRequest, opts ...grpc.CallOption) (MastermindService_GetDetailedTelemetryClient, error) {
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[2], "/mastermind.v1.MastermindService/GetDetailedTelemetry", opts...)
	if err != nil {
		return nil, err
	}
	x := &mastermindServiceGetDetailedTelemetryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MastermindService_GetDetailedTelemetryClient interface {
	Recv() (*GetDetailedTelemetryResponse, error)
	grpc.ClientStream
}

type mastermindServiceGetDetailedTelemetryClient struct {
	grpc.ClientStream
}

func (x *mastermindServiceGetDetailedTelemetryClient) Recv() (*GetDetailedTelemetryResponse, error) {
	m := new(GetDetailedTelemetryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mastermindServiceClient) SetPIDLevel(ctx context.Context, in *SetPIDLevelRequest, opts ...grpc.CallOption) (*SetPIDLevelResponse, error) {
	out := new(SetPIDLevelResponse)
	err := c.cc.Invoke(ctx, "/mastermind.v1.MastermindService/SetPIDLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastermindServiceClient) SetSpeed(ctx context.Context, in *SetSpeedRequest, opts ...grpc.CallOption) (*SetSpeedResponse, error) {
	out := new(SetSpeedResponse)
	err := c.cc.Invoke(ctx, "/mastermind.v1.MastermindService/SetSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastermindServiceClient) GotoWaypoint(ctx context.Context, in *GotoWaypointRequest, opts ...grpc.CallOption) (*GotoWaypointResponse, error) {
	out := new(GotoWaypointResponse)
	err := c.cc.Invoke(ctx, "/mastermind.v1.MastermindService/GotoWaypoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mastermindServiceClient) SetAttitude(ctx context.Context, opts ...grpc.CallOption) (MastermindService_SetAttitudeClient, error) {
	stream, err := c.cc.NewStream(ctx, &MastermindService_ServiceDesc.Streams[3], "/mastermind.v1.MastermindService/SetAttitude", opts...)
	if err != nil {
		return nil, err
	}
	x := &mastermindServiceSetAttitudeClient{stream}
	return x, nil
}

type MastermindService_SetAttitudeClient interface {
	Send(*SetAttitudeRequest) error
	CloseAndRecv() (*SetAttitudeResponse, error)
	grpc.ClientStream
}

type mastermindServiceSetAttitudeClient struct {
	grpc.ClientStream
}

func (x *mastermindServiceSetAttitudeClient) Send(m *SetAttitudeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mastermindServiceSetAttitudeClient) CloseAndRecv() (*SetAttitudeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetAttitudeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mastermindServiceClient) LockSuccess(ctx context.Context, in *LockSuccessRequest, opts ...grpc.CallOption) (*LockSuccessResponse, error) {
	out := new(LockSuccessResponse)
	err := c.cc.Invoke(ctx, "/mastermind.v1.MastermindService/LockSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MastermindServiceServer is the server API for MastermindService service.
// All implementations should embed UnimplementedMastermindServiceServer
// for forward compatibility
type MastermindServiceServer interface {
	// A bidirectional stream
	// Accepts a stream of UpdateStateRequests during the competition, while
	// sending UpdateStateResponses whenever a valid StateTransition is submitted
	// by any client
	UpdateState(MastermindService_UpdateStateServer) error
	GetTelemetry(*GetTelemetryRequest, MastermindService_GetTelemetryServer) error
	// Returns a detailed telemetry response. SHOULD be used by services that
	// interact with the competiiton server
	GetDetailedTelemetry(*GetDetailedTelemetryRequest, MastermindService_GetDetailedTelemetryServer) error
	// SetPIDLevel sets the PID level for the plane
	SetPIDLevel(context.Context, *SetPIDLevelRequest) (*SetPIDLevelResponse, error)
	// SetSpeed sets the plane's airspeed in m/s
	SetSpeed(context.Context, *SetSpeedRequest) (*SetSpeedResponse, error)
	// GotoWaypoint commands the plane to go to specified waypoint
	GotoWaypoint(context.Context, *GotoWaypointRequest) (*GotoWaypointResponse, error)
	// SetAttitude comannds the plane to change its attitude
	SetAttitude(MastermindService_SetAttitudeServer) error
	// LockSuccess indicates a successful lock on target for more than 4 seconds
	LockSuccess(context.Context, *LockSuccessRequest) (*LockSuccessResponse, error)
}

// UnimplementedMastermindServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMastermindServiceServer struct {
}

func (UnimplementedMastermindServiceServer) UpdateState(MastermindService_UpdateStateServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedMastermindServiceServer) GetTelemetry(*GetTelemetryRequest, MastermindService_GetTelemetryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTelemetry not implemented")
}
func (UnimplementedMastermindServiceServer) GetDetailedTelemetry(*GetDetailedTelemetryRequest, MastermindService_GetDetailedTelemetryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDetailedTelemetry not implemented")
}
func (UnimplementedMastermindServiceServer) SetPIDLevel(context.Context, *SetPIDLevelRequest) (*SetPIDLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPIDLevel not implemented")
}
func (UnimplementedMastermindServiceServer) SetSpeed(context.Context, *SetSpeedRequest) (*SetSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSpeed not implemented")
}
func (UnimplementedMastermindServiceServer) GotoWaypoint(context.Context, *GotoWaypointRequest) (*GotoWaypointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GotoWaypoint not implemented")
}
func (UnimplementedMastermindServiceServer) SetAttitude(MastermindService_SetAttitudeServer) error {
	return status.Errorf(codes.Unimplemented, "method SetAttitude not implemented")
}
func (UnimplementedMastermindServiceServer) LockSuccess(context.Context, *LockSuccessRequest) (*LockSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockSuccess not implemented")
}

// UnsafeMastermindServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MastermindServiceServer will
// result in compilation errors.
type UnsafeMastermindServiceServer interface {
	mustEmbedUnimplementedMastermindServiceServer()
}

func RegisterMastermindServiceServer(s grpc.ServiceRegistrar, srv MastermindServiceServer) {
	s.RegisterService(&MastermindService_ServiceDesc, srv)
}

func _MastermindService_UpdateState_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MastermindServiceServer).UpdateState(&mastermindServiceUpdateStateServer{stream})
}

type MastermindService_UpdateStateServer interface {
	Send(*UpdateStateResponse) error
	Recv() (*UpdateStateRequest, error)
	grpc.ServerStream
}

type mastermindServiceUpdateStateServer struct {
	grpc.ServerStream
}

func (x *mastermindServiceUpdateStateServer) Send(m *UpdateStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mastermindServiceUpdateStateServer) Recv() (*UpdateStateRequest, error) {
	m := new(UpdateStateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MastermindService_GetTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MastermindServiceServer).GetTelemetry(m, &mastermindServiceGetTelemetryServer{stream})
}

type MastermindService_GetTelemetryServer interface {
	Send(*GetTelemetryResponse) error
	grpc.ServerStream
}

type mastermindServiceGetTelemetryServer struct {
	grpc.ServerStream
}

func (x *mastermindServiceGetTelemetryServer) Send(m *GetTelemetryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MastermindService_GetDetailedTelemetry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDetailedTelemetryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MastermindServiceServer).GetDetailedTelemetry(m, &mastermindServiceGetDetailedTelemetryServer{stream})
}

type MastermindService_GetDetailedTelemetryServer interface {
	Send(*GetDetailedTelemetryResponse) error
	grpc.ServerStream
}

type mastermindServiceGetDetailedTelemetryServer struct {
	grpc.ServerStream
}

func (x *mastermindServiceGetDetailedTelemetryServer) Send(m *GetDetailedTelemetryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MastermindService_SetPIDLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPIDLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).SetPIDLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermind.v1.MastermindService/SetPIDLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).SetPIDLevel(ctx, req.(*SetPIDLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastermindService_SetSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).SetSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermind.v1.MastermindService/SetSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).SetSpeed(ctx, req.(*SetSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastermindService_GotoWaypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GotoWaypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).GotoWaypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermind.v1.MastermindService/GotoWaypoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).GotoWaypoint(ctx, req.(*GotoWaypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MastermindService_SetAttitude_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MastermindServiceServer).SetAttitude(&mastermindServiceSetAttitudeServer{stream})
}

type MastermindService_SetAttitudeServer interface {
	SendAndClose(*SetAttitudeResponse) error
	Recv() (*SetAttitudeRequest, error)
	grpc.ServerStream
}

type mastermindServiceSetAttitudeServer struct {
	grpc.ServerStream
}

func (x *mastermindServiceSetAttitudeServer) SendAndClose(m *SetAttitudeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mastermindServiceSetAttitudeServer) Recv() (*SetAttitudeRequest, error) {
	m := new(SetAttitudeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MastermindService_LockSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MastermindServiceServer).LockSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermind.v1.MastermindService/LockSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MastermindServiceServer).LockSuccess(ctx, req.(*LockSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MastermindService_ServiceDesc is the grpc.ServiceDesc for MastermindService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MastermindService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mastermind.v1.MastermindService",
	HandlerType: (*MastermindServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPIDLevel",
			Handler:    _MastermindService_SetPIDLevel_Handler,
		},
		{
			MethodName: "SetSpeed",
			Handler:    _MastermindService_SetSpeed_Handler,
		},
		{
			MethodName: "GotoWaypoint",
			Handler:    _MastermindService_GotoWaypoint_Handler,
		},
		{
			MethodName: "LockSuccess",
			Handler:    _MastermindService_LockSuccess_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateState",
			Handler:       _MastermindService_UpdateState_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTelemetry",
			Handler:       _MastermindService_GetTelemetry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDetailedTelemetry",
			Handler:       _MastermindService_GetDetailedTelemetry_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetAttitude",
			Handler:       _MastermindService_SetAttitude_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/mastermind/v1/mastermind.proto",
}
