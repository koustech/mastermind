// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: proto/approach/v1/approach.proto

package approachv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApproachServiceClient is the client API for ApproachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApproachServiceClient interface {
	// A server-streaming endpoint
	// Accepts a GetPlanesRequest and returns a stream of airplanes and their
	// properties, and the selected plane id if it exists
	GetPlanes(ctx context.Context, in *GetPlanesRequest, opts ...grpc.CallOption) (ApproachService_GetPlanesClient, error)
}

type approachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApproachServiceClient(cc grpc.ClientConnInterface) ApproachServiceClient {
	return &approachServiceClient{cc}
}

func (c *approachServiceClient) GetPlanes(ctx context.Context, in *GetPlanesRequest, opts ...grpc.CallOption) (ApproachService_GetPlanesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApproachService_ServiceDesc.Streams[0], "/approach.v1.ApproachService/GetPlanes", opts...)
	if err != nil {
		return nil, err
	}
	x := &approachServiceGetPlanesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApproachService_GetPlanesClient interface {
	Recv() (*GetPlanesResponse, error)
	grpc.ClientStream
}

type approachServiceGetPlanesClient struct {
	grpc.ClientStream
}

func (x *approachServiceGetPlanesClient) Recv() (*GetPlanesResponse, error) {
	m := new(GetPlanesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApproachServiceServer is the server API for ApproachService service.
// All implementations should embed UnimplementedApproachServiceServer
// for forward compatibility
type ApproachServiceServer interface {
	// A server-streaming endpoint
	// Accepts a GetPlanesRequest and returns a stream of airplanes and their
	// properties, and the selected plane id if it exists
	GetPlanes(*GetPlanesRequest, ApproachService_GetPlanesServer) error
}

// UnimplementedApproachServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApproachServiceServer struct {
}

func (UnimplementedApproachServiceServer) GetPlanes(*GetPlanesRequest, ApproachService_GetPlanesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPlanes not implemented")
}

// UnsafeApproachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApproachServiceServer will
// result in compilation errors.
type UnsafeApproachServiceServer interface {
	mustEmbedUnimplementedApproachServiceServer()
}

func RegisterApproachServiceServer(s grpc.ServiceRegistrar, srv ApproachServiceServer) {
	s.RegisterService(&ApproachService_ServiceDesc, srv)
}

func _ApproachService_GetPlanes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPlanesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApproachServiceServer).GetPlanes(m, &approachServiceGetPlanesServer{stream})
}

type ApproachService_GetPlanesServer interface {
	Send(*GetPlanesResponse) error
	grpc.ServerStream
}

type approachServiceGetPlanesServer struct {
	grpc.ServerStream
}

func (x *approachServiceGetPlanesServer) Send(m *GetPlanesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ApproachService_ServiceDesc is the grpc.ServiceDesc for ApproachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApproachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "approach.v1.ApproachService",
	HandlerType: (*ApproachServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlanes",
			Handler:       _ApproachService_GetPlanes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/approach/v1/approach.proto",
}
