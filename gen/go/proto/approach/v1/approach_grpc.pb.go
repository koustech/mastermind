// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/approach/v1/approach.proto

package approachv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApproachService_GetPlanes_FullMethodName     = "/approach.v1.ApproachService/GetPlanes"
	ApproachService_ApproachPlane_FullMethodName = "/approach.v1.ApproachService/ApproachPlane"
)

// ApproachServiceClient is the client API for ApproachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ApproachService is responsible for calculating and giving commands to
// KOUSTECH's UAV to approach a target enemy UAV
type ApproachServiceClient interface {
	// A server-streaming endpoint
	// Accepts a GetPlanesRequest and returns a stream of airplanes and their
	// properties, and the selected plane id if it exists
	GetPlanes(ctx context.Context, in *GetPlanesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPlanesResponse], error)
	// ApproachPlane sends a command to approach the plane with specified ID
	ApproachPlane(ctx context.Context, in *ApproachPlaneRequest, opts ...grpc.CallOption) (*ApproachPlaneResponse, error)
}

type approachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApproachServiceClient(cc grpc.ClientConnInterface) ApproachServiceClient {
	return &approachServiceClient{cc}
}

func (c *approachServiceClient) GetPlanes(ctx context.Context, in *GetPlanesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPlanesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ApproachService_ServiceDesc.Streams[0], ApproachService_GetPlanes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPlanesRequest, GetPlanesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApproachService_GetPlanesClient = grpc.ServerStreamingClient[GetPlanesResponse]

func (c *approachServiceClient) ApproachPlane(ctx context.Context, in *ApproachPlaneRequest, opts ...grpc.CallOption) (*ApproachPlaneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproachPlaneResponse)
	err := c.cc.Invoke(ctx, ApproachService_ApproachPlane_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApproachServiceServer is the server API for ApproachService service.
// All implementations should embed UnimplementedApproachServiceServer
// for forward compatibility.
//
// ApproachService is responsible for calculating and giving commands to
// KOUSTECH's UAV to approach a target enemy UAV
type ApproachServiceServer interface {
	// A server-streaming endpoint
	// Accepts a GetPlanesRequest and returns a stream of airplanes and their
	// properties, and the selected plane id if it exists
	GetPlanes(*GetPlanesRequest, grpc.ServerStreamingServer[GetPlanesResponse]) error
	// ApproachPlane sends a command to approach the plane with specified ID
	ApproachPlane(context.Context, *ApproachPlaneRequest) (*ApproachPlaneResponse, error)
}

// UnimplementedApproachServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApproachServiceServer struct{}

func (UnimplementedApproachServiceServer) GetPlanes(*GetPlanesRequest, grpc.ServerStreamingServer[GetPlanesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetPlanes not implemented")
}
func (UnimplementedApproachServiceServer) ApproachPlane(context.Context, *ApproachPlaneRequest) (*ApproachPlaneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproachPlane not implemented")
}
func (UnimplementedApproachServiceServer) testEmbeddedByValue() {}

// UnsafeApproachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApproachServiceServer will
// result in compilation errors.
type UnsafeApproachServiceServer interface {
	mustEmbedUnimplementedApproachServiceServer()
}

func RegisterApproachServiceServer(s grpc.ServiceRegistrar, srv ApproachServiceServer) {
	// If the following call pancis, it indicates UnimplementedApproachServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApproachService_ServiceDesc, srv)
}

func _ApproachService_GetPlanes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPlanesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApproachServiceServer).GetPlanes(m, &grpc.GenericServerStream[GetPlanesRequest, GetPlanesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ApproachService_GetPlanesServer = grpc.ServerStreamingServer[GetPlanesResponse]

func _ApproachService_ApproachPlane_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproachPlaneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproachServiceServer).ApproachPlane(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApproachService_ApproachPlane_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproachServiceServer).ApproachPlane(ctx, req.(*ApproachPlaneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApproachService_ServiceDesc is the grpc.ServiceDesc for ApproachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApproachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "approach.v1.ApproachService",
	HandlerType: (*ApproachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApproachPlane",
			Handler:    _ApproachService_ApproachPlane_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlanes",
			Handler:       _ApproachService_GetPlanes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/approach/v1/approach.proto",
}
